package baccarat

import (
	"fmt"
	"math/rand"
	"time"

	"github.com/aoyako/telegram_2ch_res_bot/games"
)

//扑克数据
var m_cbCardListData = [...]byte{
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K

	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, //方块 A - K
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, //梅花 A - K
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, //红桃 A - K
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, //黑桃 A - K
}

//生成count个[start,end)结束的不重复的随机数

//生成count个[start,end)结束的不重复的随机数

func GenerateRandomNumber(start int, end int, count int) []int {

	//范围检查

	if end < start || (end-start) < count {

		return nil

	}

	//存放结果的slice

	nums := make([]int, 0)

	//随机数生成器，加入时间戳保证每次生成的随机数不一样

	r := rand.New(rand.NewSource(time.Now().UnixNano() + time.Now().UnixNano()))

	for len(nums) < count {

		//生成随机数

		num := r.Intn((end - start)) + start

		//查重

		exist := false

		for _, v := range nums {

			if v == num {

				exist = true

				break

			}

		}

		if !exist {

			nums = append(nums, num)

		}

	}

	return nums

}

//获取牌点
func GetCardPip(cbCardData byte) byte {
	//计算牌点
	cbCardValue := games.GetCardValue(cbCardData)

	cbPipCount := games.If(cbCardValue >= 10, byte(0), cbCardValue).(byte)

	return cbPipCount
}

//获取牌点
func GetCardListPip(cbCardData [3]byte, cbCardCount byte) byte {
	//变量定义
	var cbPipCount byte

	//获取牌点
	for i := 0; byte(i) < cbCardCount; i++ {
		cbPipCount = (GetCardPip(cbCardData[i]) + cbPipCount) % 10
	}

	return cbPipCount
}

//获取点数
func GetCardTimesEmoj(cbCardData [3]byte, cbCardCount byte) string {
	var str string
	value := GetCardListPip(cbCardData, cbCardCount)
	str = fmt.Sprintf("\\(%d点\\)", value)
	return str
}

//获取花色
func GetCardColorEmoj(cbCardData byte) string {
	var str string
	//var card string
	value := int(games.GetCardValue(cbCardData))
	card := fmt.Sprintf("%d", value)

	if value == 11 {
		card = "J"
	} else if value == 12 {
		card = "Q"
	} else if value == 13 {
		card = "K"
	}

	switch games.GetCardColor(cbCardData) {
	case 0x00:
		str = "♦️"

	case 0x10:
		str = "♣"

	case 0x20:
		str = "♥️"

	case 0x30:
		str = "♠️"

	}
	str = fmt.Sprintf("%s%s", card, str)
	return str
}

//获取牌
func GetCardValueEmoj(cbCardData [MAX_COUNT]byte) string {
	var str string
	for i := 0; i < MAX_COUNT; i++ {
		str += GetCardColorEmoj(cbCardData[i])
	}
	return str
}
